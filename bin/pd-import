#!/usr/bin/env php
<?php

use Commands\CheckEnvironmentCommand;
use Commands\CoverImportCommand;
use Commands\FullImportImportCommand;
use Commands\ListMappingsCommand;
use Commands\RemoteFetcherCommand;
use Commands\SyncRemoteDirsCommand;
use Commands\TitleImportCommand;
use Commands\UserImportCommand;
use Commands\UserUpdateCommand;
use Config\Config;
use Symfony\Component\Console\Application;

const VERSION = '1.2.0';

function searchAndRequire($file, $maxDepth = 3) {

    $path = __DIR__ . DIRECTORY_SEPARATOR;
    for ($i = 0; $i <= $maxDepth; $i++) {
        if (file_exists($path . $file)) {
            require $path . $file;
            return;
        }
        $path .= '..' . DIRECTORY_SEPARATOR;
    }

    fwrite(STDERR, 'ERROR: The project is not properly set up! Please consult the README.' . PHP_EOL);
    exit(1);
}

function getVersion() {

    global $c;

    $commitDate = new \DateTime(trim(exec('git log -n1 --pretty=%ci HEAD 2>/dev/null')));
    $commitDate->setTimezone(new \DateTimeZone('UTC'));
    $commitDate = $commitDate->format('d-m-Y H:m:s');

    $hash = trim(exec('git log --pretty="%h" -n1 HEAD 2>/dev/null'));

    if (empty($commitDate) || empty($hash)) {
        $versionFile = $c['resourceFolder'].DIRECTORY_SEPARATOR.'version.json';
        if (file_exists($versionFile)) {
            $versionInfo = json_decode(file_get_contents($versionFile), true);
            if (!is_null($versionInfo)) {
                $commitDate = $versionInfo['date'];
                $hash = $versionInfo['hash'];
            }
        } else {
            return '--';
        }
    }

    return sprintf('v%s-dev.%s (%s)',
        VERSION,
        $hash,
        $commitDate
    );
}

searchAndRequire('vendor/autoload.php');
searchAndRequire('bootstrap/init.php');

// init the DI container
$c = new Pimple\Container();
$c['resourceFolder'] = dirname(__DIR__).DIRECTORY_SEPARATOR.'resources';
initContainer($c);

//check if there is a config file, otherwise create one first.
if (!file_exists(Config::getConfigFilePath())) {
    Config::createConfigFile();
    fprintf(STDOUT, "A configuration file template has been copied to %s.\nPlease review the configuration to make sure it can be used.\n", Config::getConfigFilePath());
    return;
}

$console = new Application();
$console->setName('Profildienst Import');
$console->setVersion(getVersion());

$console->add(new SyncRemoteDirsCommand($c['config']));
$console->add(new CheckEnvironmentCommand($c['validatorService'], $c['config']));
$console->add(new ListMappingsCommand($c['config']));

$console->add(new FullImportImportCommand($c['logService'], $c['mailerService']));
$console->add(new UserImportCommand($c['logService'], $c['mailerService'], $c['userImporter']));
$console->add(new UserUpdateCommand($c['logService'], $c['mailerService'], $c['userUpdater']));
$console->add(new CoverImportCommand($c['logService'], $c['mailerService'], $c['coverImporter']));
$console->add(new RemoteFetcherCommand($c['logService'], $c['mailerService'], $c['remoteFetcher'], $c['config']));
$console->add(new TitleImportCommand($c['logService'], $c['mailerService'], $c['titleImporter']));
$console->run();